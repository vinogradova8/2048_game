{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCGA,IAAM,EAAS,SAAS,aAAa,CAAC,UAChC,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAIrC,EAAW,EAFC,SAAS,gBAAgB,CAAC,eAItC,EAAY,SAAS,aAAa,CAAC,cAEzC,CAAA,EAAU,SAAS,CAAG,EAWtB,IAAK,IATC,EAAY,SAAS,aAAa,CAAC,eAErC,EAAW,EAGT,EAAY,EADJ,SAAS,gBAAgB,CAAC,gBAGlC,EAAa,EAAE,CAEZ,EAAI,EAAG,GAAK,EAAG,IAAK,CAG3B,IAAK,IAFC,EAAS,EAAE,CAER,EAAI,EAAG,GAAK,EAAS,MAAM,CAAG,EAAG,GAAK,EAC7C,EAAO,IAAI,CAAC,CAAQ,CAAC,EAAE,EAGzB,EAAW,IAAI,CAAC,EAClB,CAEA,SAAS,EAAa,CAAK,CAAE,CAAG,EAG9B,OAFe,EAAQ,KAAK,IAAI,CAAC,KAAK,MAAM,GAAK,EAAM,EAGzD,CA0BA,SAAS,IAKP,AAFiB,EAFA,SAAS,gBAAgB,CAAC,gBAInC,OAAO,CAAC,SAAC,CAAjB,EACE,GAAI,AAAmB,KAAnB,EAAK,SAAS,CAAS,CACzB,IAAK,IAAI,EAAI,EAAG,GAAK,KAAM,GAAK,EAC1B,EAAK,SAAS,CAAC,QAAQ,CAAE,eAAgB,MAAA,CAAF,KACzC,EAAK,SAAS,CAAC,MAAM,CAAE,eAAgB,MAAA,CAAF,IAGzC,EAAK,SAAS,CAAC,GAAG,CAAC,gBACrB,KAAO,CACD,EAAK,SAAS,CAAC,QAAQ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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["/* eslint-disable no-inner-declarations */ \"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nvar button = document.querySelector(\"button\");\nvar messageStart = document.querySelector(\".message-start\");\nvar messageWin = document.querySelector(\".message-win\");\nvar messageLose = document.querySelector(\".message-lose\");\nvar fieldRows = document.querySelectorAll(\".field-row\");\nvar rowsArr = _to_consumable_array(fieldRows);\nvar gameScore = document.querySelector(\".game-score\");\ngameScore.innerText = 0;\nvar gameField = document.querySelector(\".game-field\");\nvar gameOver = 0;\nvar cells = document.querySelectorAll(\".field-cell\");\nvar cellsArr = _to_consumable_array(cells);\nvar columnsArr = [];\nfor(var i = 0; i <= 3; i++){\n    var column = [];\n    for(var j = i; j <= cellsArr.length - 1; j += 4)column.push(cellsArr[j]);\n    columnsArr.push(column);\n}\nfunction randomNumber(start, end) {\n    var number = start + Math.ceil(Math.random() * end - start);\n    return number;\n}\nfunction chooseNumber() {\n    var number = randomNumber(1, 10);\n    if (number === 1) return 4;\n    return 2;\n}\nfunction chooseCell() {\n    var fieldCellNumber = randomNumber(1, 16);\n    var fieldCell = document.querySelector(\".field-cell--n\".concat(fieldCellNumber));\n    while(!(fieldCell.innerText === \"\")){\n        fieldCellNumber = randomNumber(1, 16);\n        fieldCell = document.querySelector(\".field-cell--n\".concat(fieldCellNumber));\n    }\n    return fieldCell;\n}\nfunction colorCells() {\n    var cellList = document.querySelectorAll(\".field-cell\");\n    var cellArr = _to_consumable_array(cellList);\n    cellArr.forEach(function(cell) {\n        if (cell.innerText === \"\") {\n            for(var i = 2; i <= 2048; i *= 2)if (cell.classList.contains(\"field-cell--\".concat(i))) cell.classList.remove(\"field-cell--\".concat(i));\n            cell.classList.add(\"field-cell--0\");\n        } else {\n            if (cell.classList.contains(\"field-cell--0\")) cell.classList.remove(\"field-cell--0\");\n            for(var i1 = 2; i1 <= 2048; i1 *= 2)if (cell.classList.contains(\"field-cell--\".concat(i1))) cell.classList.remove(\"field-cell--\".concat(i1));\n            cell.classList.add(\"field-cell--\".concat(cell.innerText));\n        }\n    });\n}\nfunction addNewNumber() {\n    var cellContent = chooseNumber();\n    var fieldCell = chooseCell();\n    setTimeout(function() {\n        fieldCell.classList.add(\"field-cell--\".concat(cellContent));\n        fieldCell.innerText = cellContent;\n    }, 100);\n}\nfunction emptyCellCheckRightAndDown(arr) {\n    for(var i = arr.length - 1; i > 0; i--){\n        if (arr[i].innerText === \"\") {\n            arr[i].innerText = arr[i - 1].innerText;\n            arr[i - 1].innerText = \"\";\n        } else continue;\n    }\n}\nfunction emptyCellCheckLeftAndUp(arr) {\n    for(var i = 0; i < arr.length - 1; i++){\n        if (arr[i].innerText === \"\") {\n            arr[i].innerText = arr[i + 1].innerText;\n            arr[i + 1].innerText = \"\";\n        } else continue;\n    }\n}\nfunction emptyCellInRowOrColumnCheck(arr, keyCode) {\n    var arrOfvalues = [];\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = arr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            arrOfvalues.push(ch.innerText);\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    if (!arrOfvalues.includes(\"\")) return;\n    if (keyCode === \"ArrowRight\" || keyCode === \"ArrowDown\") {\n        emptyCellCheckRightAndDown(arr);\n        emptyCellCheckRightAndDown(arr);\n    }\n    if (keyCode === \"ArrowLeft\" || keyCode === \"ArrowUp\") {\n        emptyCellCheckLeftAndUp(arr);\n        emptyCellCheckLeftAndUp(arr);\n    }\n}\nfunction emptyCellCheck() {\n    var count = 0;\n    var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n    try {\n        for(var _iterator = rowsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n            var ch = _step.value;\n            for(var i = 0; i < 3; i++)if (ch.children[i].innerText !== ch.children[i + 1].innerText && ch.children[i].innerText !== \"\" && ch.children[i + 1].innerText !== \"\") count++;\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n                _iterator.return();\n            }\n        } finally{\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n    var _iteratorNormalCompletion1 = true, _didIteratorError1 = false, _iteratorError1 = undefined;\n    try {\n        for(var _iterator1 = columnsArr[Symbol.iterator](), _step1; !(_iteratorNormalCompletion1 = (_step1 = _iterator1.next()).done); _iteratorNormalCompletion1 = true){\n            var ch1 = _step1.value;\n            for(var i1 = 0; i1 < 3; i1++)if (ch1[i1].innerText !== ch1[i1 + 1].innerText && ch1[i1].innerText !== \"\" && ch1[i1 + 1].innerText !== \"\") count++;\n        }\n    } catch (err) {\n        _didIteratorError1 = true;\n        _iteratorError1 = err;\n    } finally{\n        try {\n            if (!_iteratorNormalCompletion1 && _iterator1.return != null) {\n                _iterator1.return();\n            }\n        } finally{\n            if (_didIteratorError1) {\n                throw _iteratorError1;\n            }\n        }\n    }\n    var innerTextArr = cellsArr.map(function(cell) {\n        return cell.innerText;\n    });\n    if (count === 24) {\n        messageLose.classList.remove(\"hidden\");\n        gameField.classList.add(\"game-over\");\n        gameOver++;\n    }\n    if (innerTextArr.includes(\"2048\")) {\n        messageWin.classList.remove(\"hidden\");\n        gameField.classList.add(\"game-over\");\n        gameOver++;\n    }\n    if (gameOver > 0 && count === 24) {\n        gameField.classList.add(\"game-over\");\n        messageLose.classList.remove(\"hidden\");\n    }\n}\nfunction clearCells() {\n    cellsArr.forEach(function(cell) {\n        cell.innerText = \"\";\n    });\n    colorCells();\n}\ncolorCells();\nbutton.addEventListener(\"click\", function() {\n    if (button.classList.contains(\"start\")) {\n        button.innerText = \"Restart\";\n        button.classList.remove(\"start\");\n        button.classList.add(\"restart\");\n        messageStart.classList.add(\"hidden\");\n        addNewNumber();\n        addNewNumber();\n        return;\n    }\n    if (button.classList.contains(\"restart\")) {\n        clearCells();\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n        gameField.classList.remove(\"game-over\");\n        gameScore.innerText = 0;\n        gameOver = 0;\n        addNewNumber();\n        addNewNumber();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.code === \"ArrowRight\") {\n        if (gameOver > 0) return;\n        var numbersArrBefore = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = rowsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var ch = _step.value;\n                for(var i = ch.children.length - 1; i > 0; i--){\n                    emptyCellInRowOrColumnCheck(ch.children, e.code);\n                    if (ch.children[i].innerText === ch.children[i - 1].innerText && ch.children[i].innerText !== \"\") {\n                        ch.children[i].innerText = \"\".concat(+ch.children[i].innerText * 2);\n                        ch.children[i - 1].innerText = \"\";\n                        gameScore.innerText = +gameScore.innerText + +ch.children[i].innerText;\n                    } else continue;\n                }\n                colorCells();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var numbersArrAfter = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        if (JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) && gameOver === 0) addNewNumber();\n        emptyCellCheck();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.code === \"ArrowDown\") {\n        if (gameOver > 0) return;\n        var numbersArrBefore = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = columnsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var ch = _step.value;\n                for(var i = ch.length - 1; i > 0; i--){\n                    emptyCellInRowOrColumnCheck(ch, e.code);\n                    if (ch[i].innerText === ch[i - 1].innerText && ch[i].innerText !== \"\") {\n                        ch[i].innerText = \"\".concat(+ch[i].innerText * 2);\n                        ch[i - 1].innerText = \"\";\n                        gameScore.innerText = +gameScore.innerText + +ch[i].innerText;\n                    } else continue;\n                }\n                colorCells();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var numbersArrAfter = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        if (JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) && gameOver === 0) addNewNumber();\n        emptyCellCheck();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.code === \"ArrowLeft\") {\n        if (gameOver > 0) return;\n        var numbersArrBefore = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = rowsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var ch = _step.value;\n                for(var i = 0; i < ch.children.length - 1; i++){\n                    emptyCellInRowOrColumnCheck(ch.children, e.code);\n                    if (ch.children[i].innerText === ch.children[i + 1].innerText && ch.children[i].innerText !== \"\") {\n                        ch.children[i].innerText = \"\".concat(+ch.children[i + 1].innerText * 2);\n                        ch.children[i + 1].innerText = \"\";\n                        gameScore.innerText = +gameScore.innerText + +ch.children[i].innerText;\n                    } else continue;\n                }\n                colorCells();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var numbersArrAfter = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        if (JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) && gameOver === 0) addNewNumber();\n        emptyCellCheck();\n    }\n});\ndocument.addEventListener(\"keydown\", function(e) {\n    if (e.code === \"ArrowUp\") {\n        if (gameOver > 0) return;\n        var numbersArrBefore = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = columnsArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var ch = _step.value;\n                for(var i = 0; i < ch.length - 1; i++){\n                    emptyCellInRowOrColumnCheck(ch, e.code);\n                    if (ch[i].innerText === ch[i + 1].innerText && ch[i].innerText !== \"\") {\n                        ch[i].innerText = \"\".concat(+ch[i + 1].innerText * 2);\n                        ch[i + 1].innerText = \"\";\n                        gameScore.innerText = +gameScore.innerText + +ch[i].innerText;\n                    } else continue;\n                }\n                colorCells();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        var numbersArrAfter = cellsArr.map(function(cell) {\n            return cell.innerText;\n        });\n        if (JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) && gameOver === 0) addNewNumber();\n        emptyCellCheck();\n    }\n});\n\n//# sourceMappingURL=index.8ba28be8.js.map\n","/* eslint-disable no-inner-declarations */\n\"use strict\";\n\nconst button = document.querySelector(\"button\");\nconst messageStart = document.querySelector(\".message-start\");\nconst messageWin = document.querySelector(\".message-win\");\nconst messageLose = document.querySelector(\".message-lose\");\n\nconst fieldRows = document.querySelectorAll(\".field-row\");\n\nconst rowsArr = [...fieldRows];\n\nconst gameScore = document.querySelector(\".game-score\");\n\ngameScore.innerText = 0;\n\nconst gameField = document.querySelector(\".game-field\");\n\nlet gameOver = 0;\n\nconst cells = document.querySelectorAll(\".field-cell\");\nconst cellsArr = [...cells];\n\nconst columnsArr = [];\n\nfor (let i = 0; i <= 3; i++) {\n  const column = [];\n\n  for (let j = i; j <= cellsArr.length - 1; j += 4) {\n    column.push(cellsArr[j]);\n  }\n\n  columnsArr.push(column);\n}\n\nfunction randomNumber(start, end) {\n  const number = start + Math.ceil(Math.random() * end - start);\n\n  return number;\n}\n\nfunction chooseNumber() {\n  const number = randomNumber(1, 10);\n\n  if (number === 1) {\n    return 4;\n  }\n\n  return 2;\n}\n\nfunction chooseCell() {\n  let fieldCellNumber = randomNumber(1, 16);\n\n  let fieldCell = document.querySelector(`.field-cell--n${fieldCellNumber}`);\n\n  while (!(fieldCell.innerText === \"\")) {\n    fieldCellNumber = randomNumber(1, 16);\n\n    fieldCell = document.querySelector(`.field-cell--n${fieldCellNumber}`);\n  }\n\n  return fieldCell;\n}\n\nfunction colorCells() {\n  const cellList = document.querySelectorAll(\".field-cell\");\n\n  const cellArr = [...cellList];\n\n  cellArr.forEach((cell) => {\n    if (cell.innerText === \"\") {\n      for (let i = 2; i <= 2048; i *= 2) {\n        if (cell.classList.contains(`field-cell--${i}`)) {\n          cell.classList.remove(`field-cell--${i}`);\n        }\n      }\n      cell.classList.add(\"field-cell--0\");\n    } else {\n      if (cell.classList.contains(`field-cell--0`)) {\n        cell.classList.remove(`field-cell--0`);\n      }\n\n      for (let i = 2; i <= 2048; i *= 2) {\n        if (cell.classList.contains(`field-cell--${i}`)) {\n          cell.classList.remove(`field-cell--${i}`);\n        }\n      }\n      cell.classList.add(`field-cell--${cell.innerText}`);\n    }\n  });\n}\n\nfunction addNewNumber() {\n  const cellContent = chooseNumber();\n\n  const fieldCell = chooseCell();\n\n  setTimeout(() => {\n    fieldCell.classList.add(`field-cell--${cellContent}`);\n    fieldCell.innerText = cellContent;\n  }, 100);\n}\n\nfunction emptyCellCheckRightAndDown(arr) {\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i].innerText === \"\") {\n      arr[i].innerText = arr[i - 1].innerText;\n      arr[i - 1].innerText = \"\";\n    } else {\n      continue;\n    }\n  }\n}\n\nfunction emptyCellCheckLeftAndUp(arr) {\n  for (let i = 0; i < arr.length - 1; i++) {\n    if (arr[i].innerText === \"\") {\n      arr[i].innerText = arr[i + 1].innerText;\n      arr[i + 1].innerText = \"\";\n    } else {\n      continue;\n    }\n  }\n}\n\nfunction emptyCellInRowOrColumnCheck(arr, keyCode) {\n  const arrOfvalues = [];\n\n  for (const ch of arr) {\n    arrOfvalues.push(ch.innerText);\n  }\n\n  if (!arrOfvalues.includes(\"\")) {\n    return;\n  }\n\n  if (keyCode === \"ArrowRight\" || keyCode === \"ArrowDown\") {\n    emptyCellCheckRightAndDown(arr);\n    emptyCellCheckRightAndDown(arr);\n  }\n\n  if (keyCode === \"ArrowLeft\" || keyCode === \"ArrowUp\") {\n    emptyCellCheckLeftAndUp(arr);\n    emptyCellCheckLeftAndUp(arr);\n  }\n}\n\nfunction emptyCellCheck() {\n  let count = 0;\n\n  for (const ch of rowsArr) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        ch.children[i].innerText !== ch.children[i + 1].innerText &&\n        ch.children[i].innerText !== \"\" &&\n        ch.children[i + 1].innerText !== \"\"\n      ) {\n        count++;\n      }\n    }\n  }\n\n  for (const ch of columnsArr) {\n    for (let i = 0; i < 3; i++) {\n      if (\n        ch[i].innerText !== ch[i + 1].innerText &&\n        ch[i].innerText !== \"\" &&\n        ch[i + 1].innerText !== \"\"\n      ) {\n        count++;\n      }\n    }\n  }\n\n  const innerTextArr = cellsArr.map((cell) => cell.innerText);\n\n  if (count === 24) {\n    messageLose.classList.remove(\"hidden\");\n    gameField.classList.add(\"game-over\");\n    gameOver++;\n  }\n\n  if (innerTextArr.includes(\"2048\")) {\n    messageWin.classList.remove(\"hidden\");\n    gameField.classList.add(\"game-over\");\n    gameOver++;\n  }\n\n  if (gameOver > 0 && count === 24) {\n    gameField.classList.add(\"game-over\");\n    messageLose.classList.remove(\"hidden\");\n  }\n}\n\nfunction clearCells() {\n  cellsArr.forEach((cell) => {\n    cell.innerText = \"\";\n  });\n  colorCells();\n}\n\ncolorCells();\n\nbutton.addEventListener(\"click\", () => {\n  if (button.classList.contains(\"start\")) {\n    button.innerText = \"Restart\";\n    button.classList.remove(\"start\");\n    button.classList.add(\"restart\");\n    messageStart.classList.add(\"hidden\");\n    addNewNumber();\n    addNewNumber();\n\n    return;\n  }\n\n  if (button.classList.contains(\"restart\")) {\n    clearCells();\n    messageWin.classList.add(\"hidden\");\n    messageLose.classList.add(\"hidden\");\n    gameField.classList.remove(\"game-over\");\n    gameScore.innerText = 0;\n    gameOver = 0;\n    addNewNumber();\n    addNewNumber();\n  }\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"ArrowRight\") {\n    if (gameOver > 0) {\n      return;\n    }\n\n    const numbersArrBefore = cellsArr.map((cell) => cell.innerText);\n\n    for (const ch of rowsArr) {\n      for (let i = ch.children.length - 1; i > 0; i--) {\n        emptyCellInRowOrColumnCheck(ch.children, e.code);\n\n        if (\n          ch.children[i].innerText === ch.children[i - 1].innerText &&\n          ch.children[i].innerText !== \"\"\n        ) {\n          ch.children[i].innerText = `${+ch.children[i].innerText * 2}`;\n          ch.children[i - 1].innerText = \"\";\n\n          gameScore.innerText =\n            +gameScore.innerText + +ch.children[i].innerText;\n        } else {\n          continue;\n        }\n      }\n      colorCells();\n    }\n\n    const numbersArrAfter = cellsArr.map((cell) => cell.innerText);\n\n    if (\n      JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) &&\n      gameOver === 0\n    ) {\n      addNewNumber();\n    }\n\n    emptyCellCheck();\n  }\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"ArrowDown\") {\n    if (gameOver > 0) {\n      return;\n    }\n\n    const numbersArrBefore = cellsArr.map((cell) => cell.innerText);\n\n    for (const ch of columnsArr) {\n      for (let i = ch.length - 1; i > 0; i--) {\n        emptyCellInRowOrColumnCheck(ch, e.code);\n\n        if (ch[i].innerText === ch[i - 1].innerText && ch[i].innerText !== \"\") {\n          ch[i].innerText = `${+ch[i].innerText * 2}`;\n          ch[i - 1].innerText = \"\";\n\n          gameScore.innerText = +gameScore.innerText + +ch[i].innerText;\n        } else {\n          continue;\n        }\n      }\n      colorCells();\n    }\n\n    const numbersArrAfter = cellsArr.map((cell) => cell.innerText);\n\n    if (\n      JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) &&\n      gameOver === 0\n    ) {\n      addNewNumber();\n    }\n\n    emptyCellCheck();\n  }\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"ArrowLeft\") {\n    if (gameOver > 0) {\n      return;\n    }\n\n    const numbersArrBefore = cellsArr.map((cell) => cell.innerText);\n\n    for (const ch of rowsArr) {\n      for (let i = 0; i < ch.children.length - 1; i++) {\n        emptyCellInRowOrColumnCheck(ch.children, e.code);\n\n        if (\n          ch.children[i].innerText === ch.children[i + 1].innerText &&\n          ch.children[i].innerText !== \"\"\n        ) {\n          ch.children[i].innerText = `${+ch.children[i + 1].innerText * 2}`;\n          ch.children[i + 1].innerText = \"\";\n\n          gameScore.innerText =\n            +gameScore.innerText + +ch.children[i].innerText;\n        } else {\n          continue;\n        }\n      }\n      colorCells();\n    }\n\n    const numbersArrAfter = cellsArr.map((cell) => cell.innerText);\n\n    if (\n      JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) &&\n      gameOver === 0\n    ) {\n      addNewNumber();\n    }\n\n    emptyCellCheck();\n  }\n});\n\ndocument.addEventListener(\"keydown\", (e) => {\n  if (e.code === \"ArrowUp\") {\n    if (gameOver > 0) {\n      return;\n    }\n\n    const numbersArrBefore = cellsArr.map((cell) => cell.innerText);\n\n    for (const ch of columnsArr) {\n      for (let i = 0; i < ch.length - 1; i++) {\n        emptyCellInRowOrColumnCheck(ch, e.code);\n\n        if (ch[i].innerText === ch[i + 1].innerText && ch[i].innerText !== \"\") {\n          ch[i].innerText = `${+ch[i + 1].innerText * 2}`;\n          ch[i + 1].innerText = \"\";\n\n          gameScore.innerText = +gameScore.innerText + +ch[i].innerText;\n        } else {\n          continue;\n        }\n      }\n      colorCells();\n    }\n\n    const numbersArrAfter = cellsArr.map((cell) => cell.innerText);\n\n    if (\n      JSON.stringify(numbersArrBefore) !== JSON.stringify(numbersArrAfter) &&\n      gameOver === 0\n    ) {\n      addNewNumber();\n    }\n\n    emptyCellCheck();\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","button","document","querySelector","messageStart","messageWin","messageLose","rowsArr","querySelectorAll","gameScore","innerText","gameField","gameOver","cellsArr","columnsArr","column","j","push","randomNumber","start","end","Math","ceil","random","colorCells","cellArr","forEach","cell","classList","contains","concat","remove","add","i1","addNewNumber","cellContent","number","fieldCell","chooseCell","fieldCellNumber","setTimeout","emptyCellCheckRightAndDown","emptyCellCheckLeftAndUp","emptyCellInRowOrColumnCheck","keyCode","arrOfvalues","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","next","done","ch","value","err","return","includes","emptyCellCheck","count","children","_iteratorNormalCompletion1","_didIteratorError1","_iteratorError1","_step1","_iterator1","ch1","innerTextArr","map","addEventListener","e","code","numbersArrBefore","numbersArrAfter","JSON","stringify"],"version":3,"file":"index.8ba28be8.js.map"}